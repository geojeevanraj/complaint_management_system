name: CI/CD Pipeline (No Docker) - Complaint Management System

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Note: Using Python 3.11 instead of 3.12 because pyodbc doesn't support Python 3.12+
# due to removed Unicode APIs (PyUnicode_FromUnicode, PyUnicode_AS_UNICODE, etc.)
env:
  PYTHON_VERSION: '3.11'
  
jobs:
  # Job 1: Code Quality and Linting
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Linting
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install unixODBC-dev
      run: sudo apt-get update && sudo apt-get install -y unixodbc-dev
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy pylint bandit safety
        
    - name: Format check with Black
      run: black --check --diff . || true
        
    - name: Import sorting check with isort
      run: isort --check-only --diff . || true
        
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Type checking with mypy
      run: mypy . --ignore-missing-imports || true
        
    - name: Security check with bandit
      run: bandit -r . -f json -o bandit-report.json || true

  # Job 2: Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    needs: code-quality
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install unixODBC-dev
      run: sudo apt-get update && sudo apt-get install -y unixodbc-dev
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
        
    - name: Run unit tests
      run: pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml

  # Job 3: Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: unit-tests
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: complaint_system_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install unixODBC-dev
      run: sudo apt-get update && sudo apt-get install -y unixodbc-dev
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up test database
      env:
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_NAME: complaint_system_test
        DB_USER: root
        DB_PASSWORD: test_password
      run: python setup_database.py
        
    - name: Run integration tests
      env:
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_NAME: complaint_system_test
        DB_USER: root
        DB_PASSWORD: test_password
      run: pytest tests/integration/ -v

  # Job 4: Build Python Package
  build-package:
    runs-on: ubuntu-latest
    name: Build Python Package
    needs: [unit-tests, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
        
    - name: Build package
      run: python -m build --wheel --outdir dist/
        
    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

  # Job 5: Deploy to Staging (Traditional Server)
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: build-package
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging server via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /var/www/complaint_system
          git pull origin develop
          source venv/bin/activate
          pip install -r requirements.txt
          python setup_database.py
          sudo systemctl restart complaint-system
          sudo systemctl status complaint-system

  # Job 6: Deploy to Production (Traditional Server)
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: build-package
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production server via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /var/www/complaint_system
          git pull origin main
          source venv/bin/activate
          pip install -r requirements.txt
          python setup_database.py
          sudo systemctl restart complaint-system
          sudo systemctl status complaint-system

  # Job 7: Deploy to Cloud Platform (Heroku/PythonAnywhere)
  deploy-cloud:
    runs-on: ubuntu-latest
    name: Deploy to Cloud Platform
    needs: build-package
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Heroku
      uses: akhileshns/heroku-deploy@v3.12.14
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: "complaint-management-app"
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        
    # Alternative: Deploy to PythonAnywhere
    # - name: Deploy to PythonAnywhere
    #   run: |
    #     # Upload files via FTP/SFTP
    #     # Restart web app via API
    #     echo "Deploying to PythonAnywhere"

  # Job 8: Simple File-based Deployment
  deploy-simple:
    runs-on: ubuntu-latest
    name: Simple File Deployment
    needs: build-package
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy via FTP/SFTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_HOST }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./
        server-dir: /public_html/complaint_system/

  # Job 9: Health Check
  health-check:
    runs-on: ubuntu-latest
    name: Post-Deployment Health Check
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: Check staging health
      if: github.ref == 'refs/heads/develop'
      run: |
        curl -f ${{ secrets.STAGING_URL }}/health || exit 1
        echo "✅ Staging deployment healthy"
        
    - name: Check production health
      if: github.ref == 'refs/heads/main'
      run: |
        curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
        echo "✅ Production deployment healthy"
